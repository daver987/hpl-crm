import { z } from 'zod'

export const EmployeeSchema = z.object({
  userId: z.number(),
  employeeId: z.number(),
  employeeType: z.string(),
  displayName: z.string(),
  phoneCell: z.string(),
  emailAddress: z.string(),
  isInactive: z.boolean(),
  companyId: z.number(),
  firstName: z.string(),
  lastName: z.string(),
  middleName: z.string(),
  title: z.string(),
  phoneHome: z.string(),
  phoneOther: z.string(),
  messageAddress: z.string(),
  metroAreaServed: z.string(),
  address: z.object({
    street1: z.string(),
    street2: z.string(),
    city: z.string(),
    region: z.string(),
    postalCode: z.string(),
    country: z.string(),
    displayAddress: z.string(),
    geoLookupAddress: z.string(),
    cityRegionPostalCode: z.string(),
  }),
  hasExpiredLicense: z.boolean(),
  hasExpiredLicenseNotification: z.boolean(),
  hasCommercialLicense: z.boolean(),
  isScheduleDisabled: z.boolean(),
  isOccasionalDriver: z.boolean(),
  terminationDate: z.null(),
  hasEmployeePhoto: z.boolean(),
  employeePhotoUrl: z.string(),
  modifiedDate: z.string(),
  status: z.string(),
  payType: z.string(),
  payFixedAmount: z.number(),
  payTimeCalculationType: z.string(),
  payHourlyRate: z.number(),
  doPayPercentageAfterDiscounts: z.boolean(),
  payPercentageOfBaseAmount: z.number(),
  payPercentageOfJobTotal: z.number(),
  paySalaryIntervalType: z.string(),
  paySalaryAmount: z.number(),
  paySalaryNextPayDate: z.null(),
  paySalaryTwiceMonthlyDay1: z.number(),
  paySalaryTwiceMonthlyDay2: z.number(),
  payMinimumHours: z.number(),
})

export const EmployeeResponseSchema = z.object({
  items: EmployeeSchema.array(),
  status: z.string(),
  includesOperationalMessage: z.boolean(),
})

export const EmployeePaySearchResponseSchema = z.object({
  items: z.array(
    z.object({
      employeePayId: z.number(),
      employeeName: z.string(),
      employeeId: z.number(),
      reference: z.string(),
      billingHoursForPay: z.number(),
      total: z.number(),
      reservationId: z.number(),
      isPaid: z.boolean(),
      isApproved: z.boolean(),
      isCreatedInBilling: z.boolean(),
      scheduledPayDate: z.string(),
      actualPayDate: z.string(),
      createTime: z.string(),
      companyId: z.number(),
      scheduledPickupTime: z.string(),
      paymentNotes: z.string(),
      passengerName: z.string(),
      reservationBillingSummary: z.object({
        reservationId: z.number(),
        reservationGross: z.number(),
        reservationNetAfterPay: z.number(),
        grossMargin: z.number(),
        reservationEmployeeType: z.string(),
        vehicleTypeName: z.string(),
      }),
      customerName: z.string(),
    })
  ),
  status: z.string(),
  message: z.string(),
  includesOperationalMessage: z.boolean(),
})

export type EmployeePayResponse = z.infer<
  typeof EmployeePaySearchResponseSchema
>
export type Employee = z.infer<typeof EmployeeSchema>
export const EmployeeReservationSchema = z.object({
  createUser: z.string(),
  reservationId: z.number(),
  vehicleId: z.number(),
  employeeId: z.number(),
  greeterId: z.number(),
  externalBookingId: z.string(),
  companyId: z.number(),
  reservationGroupId: z.number(),
  customerId: z.number(),
  corporateProfileId: z.number(),
  pricingId: z.number(),
  vehicleTypeId: z.number(),
  reservationStatus: z.string(),
  travelType: z.string(),
  reservationPhoneNumber: z.string(),
  referencePO: z.string(),
  costCode: z.string(),
  bookingSource: z.string(),
  bookingCategory: z.string(),
  tripCategory: z.string(),
  tripType: z.string(),
  orderedBy: z.string(),
  orderedByPhone: z.string(),
  timeZoneName: z.string(),
  scheduledPickupTime: z.string(),
  estimatedEndTime: z.string(),
  isDatabaseTimezone: z.boolean(),
  timeZoneUTCOffsetMinutes: z.number(),
  timeZoneLocalOffsetMinutes: z.number(),
  driverInTime: z.null(),
  driverSpotTime: z.null(),
  enRouteTime: z.null(),
  onLocationTime: z.null(),
  actualPickupTime: z.null(),
  dropoffTime: z.string(),
  noShowTime: z.null(),
  cancelTime: z.null(),
  returnTime: z.null(),
  billingStartTime: z.string(),
  billingEndTime: z.string(),
  actualHours: z.number(),
  estimatedHours: z.number(),
  beginMileage: z.number(),
  endMileage: z.number(),
  driverNotes: z.string(),
  driverDispatchStatus: z.string(),
  dispatchNotes: z.string(),
  tripNotes: z.string(),
  affiliateNotes: z.string(),
  tripPreferences: z.string(),
  fromLocation: z.object({
    latitude: z.number(),
    longitude: z.number(),
    address: z.object({
      street1: z.string(),
      street2: z.string(),
      city: z.string(),
      region: z.string(),
      postalCode: z.string(),
      displayAddress: z.string(),
      geoLookupAddress: z.string(),
      cityRegionPostalCode: z.string(),
    }),
    airportAirlineFlightInfo: z.object({
      airportId: z.number(),
      airportCode: z.string(),
      airportName: z.string(),
      airlineId: z.number(),
      airlineCode: z.string(),
      airlineName: z.string(),
      flightNumber: z.string(),
      connectingAirportID: z.number(),
      scheduledDateTime: z.string(),
      actualDateTime: z.null(),
      flightStatus: z.string(),
      flightStatusAdditional: z.string(),
      flightStatusType: z.string(),
    }),
    additionalInformation: z.string(),
    summaryAddress: z.string(),
    displayAddress: z.string(),
    geoLookupAddress: z.string(),
  }),
  toLocation: z.object({
    latitude: z.number(),
    longitude: z.number(),
    address: z.object({
      street1: z.string(),
      street2: z.string(),
      city: z.string(),
      region: z.string(),
      postalCode: z.string(),
      country: z.string(),
      displayAddress: z.string(),
      geoLookupAddress: z.string(),
      cityRegionPostalCode: z.string(),
    }),
    additionalInformation: z.string(),
    summaryAddress: z.string(),
    displayAddress: z.string(),
    geoLookupAddress: z.string(),
  }),
  passengerCount: z.number(),
  luggageCount: z.number(),
  primaryPassenger: z.object({
    name: z.string(),
    alias: z.string(),
    phoneNumber: z.string(),
    emailAddress: z.string(),
    doEnablePassengerEmail: z.boolean(),
    doEnablePassengerSMS: z.boolean(),
  }),
  numAdditionalStops: z.number(),
  numSupportDocuments: z.number(),
  reservationOrigin: z.string(),
  totalCharges: z.number(),
  affiliatePay: z.number(),
  isInBilling: z.boolean(),
  isExcludedFromBilling: z.boolean(),
  isFinalized: z.boolean(),
  isInvoiced: z.boolean(),
  isDriverPayProcessed: z.boolean(),
  isDriverPayReadyForProcessing: z.boolean(),
  isChangedDayOfDispatch: z.boolean(),
  isRecurring: z.boolean(),
  hasReservationNotes: z.boolean(),
  hasIncidents: z.boolean(),
  isCharter: z.boolean(),
  isCharterLeg: z.boolean(),
  charterReservationId: z.number(),
  charterMoveId: z.number(),
  charterMoveName: z.string(),
  charterLegType: z.string(),
  collectionMethod: z.string(),
  collectionType: z.string(),
  creditCardId: z.number(),
  isVip: z.boolean(),
  isSpecialHandling: z.boolean(),
  segmentId: z.string(),
  alternateContractId: z.number(),
  doInvoiceCustomerDirectly: z.boolean(),
  isFarmIn: z.boolean(),
  isFarmOut: z.boolean(),
  totalDeposits: z.number(),
  creditCardAuthorizationAmount: z.number(),
  companySummary: z.object({
    companyId: z.number(),
    companyName: z.string(),
  }),
  customerSummary: z.object({
    doBillCorporate: z.boolean(),
    doUseCorporatePricingOverrides: z.boolean(),
    profileNotes: z.string(),
    invoiceMessage: z.string(),
    invoiceCreateHandlingType: z.string(),
    corporateProfileId: z.number(),
    deliveryMethod: z.string(),
    deliveryFrequency: z.string(),
    customerId: z.number(),
    companyId: z.number(),
    firstName: z.string(),
    lastName: z.string(),
    middleName: z.string(),
    emailAddress: z.string(),
    phoneNumber1: z.string(),
    cellPhoneNumber: z.string(),
    accountNumber: z.string(),
    doRequireReferencePo: z.boolean(),
  }),
  corporateProfileSummary: z.object({
    corporateProfileId: z.number(),
    companyName: z.string(),
  }),
  vehicleSummary: z.object({
    vehicleId: z.number(),
    vehicleTypeId: z.number(),
    year: z.number(),
    capacity: z.number(),
    currentMileage: z.number(),
  }),
  vehicleTypeSummary: z.object({
    vehicleTypeId: z.number(),
    externalVehicleTypeId: z.number(),
    vehicleTypeName: z.string(),
    isExcludedFromInternetReservations: z.boolean(),
    passengerCapacity: z.number(),
    bagCapacity: z.number(),
    colorRed: z.number(),
    colorGreen: z.number(),
    colorBlue: z.number(),
  }),
  driverSummary: z.object({
    employeeId: z.number(),
    affiliateId: z.number(),
    affiliateDriverId: z.number(),
    firstName: z.string(),
    lastName: z.string(),
    cellPhoneNumber: z.string(),
    emailAddress: z.string(),
    status: z.string(),
    driverType: z.string(),
  }),
  customerContactId: z.number(),
  corporateProfileContactId: z.number(),
  cancelledBy: z.string(),
  confirmedBy: z.string(),
  createTime: z.string(),
  modifiedTime: z.string(),
})
export const EmployeeReservationResponseSchema = z.object({
  items: z.array(EmployeeReservationSchema),
  status: z.string(),
  message: z.string(),
  includesOperationalMessage: z.boolean(),
})
export type EmployeeReservation = z.infer<typeof EmployeeReservationSchema>
