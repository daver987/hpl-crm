import { z } from 'zod'

export const AgingReportSchema = z.object({
  item: z.object({
    agingInvoiceInfoList: z.array(
      z.object({
        invoiceInfo: z.object({
          invoiceId: z.number(),
          invoiceDate: z.string(),
          invoicePayStatus: z.string(),
          customerId: z.number(),
          corporateProfileId: z.number(),
          companyId: z.number(),
          invoiceMessage: z.string(),
          daysInBilling: z.number(),
          unusedDeposits: z.number(),
          invoiceTotal: z.number(),
          adjustedInvoiceTotal: z.number(),
          outstandingBalance: z.number(),
          paymentTotal: z.number(),
          adjustmentTotal: z.number(),
          depositDebitTotal: z.number(),
          discountTotal: z.number(),
          invoiceAddress: z.object({
            street1: z.string(),
            street2: z.string(),
            city: z.string(),
            region: z.string(),
            postalCode: z.string(),
            country: z.string(),
            displayAddress: z.string(),
            geoLookupAddress: z.string(),
            cityRegionPostalCode: z.string(),
          }),
          collectionMethod: z.string(),
          collectionType: z.string(),
          creditCardId: z.number(),
          isCorrectedInvoice: z.boolean(),
          isCancelledInvoice: z.boolean(),
          lastLateFeeDate: z.string(),
          isEmailed: z.boolean(),
          invoiceNotes: z.string(),
          createTime: z.string(),
          modifiedTime: z.string(),
          billToSummary: z.object({
            billToName: z.string(),
            billToDescription: z.string(),
            billToEntityType: z.string(),
            customerId: z.number(),
            corporateProfileID: z.number(),
            doBillCorporate: z.boolean(),
          }),
          ccAuthorizationSummary: z.object({
            creditCardAuthorizationId: z.number(),
            authorizationCode: z.string(),
            creditCardId: z.number(),
            amount: z.number(),
            lastDigits: z.string(),
            cardTypeDesc: z.string(),
            description: z.string(),
          }),
        }),
        isUnpaid: z.boolean(),
        isLate: z.boolean(),
        isCreditBalance: z.boolean(),
        agingReportTimeframeType: z.string(),
      })
    ),
    agingBillToSummaryList: z.array(
      z.object({
        billToSummary: z.object({
          billToName: z.string(),
          billToDescription: z.string(),
          billToEntityType: z.string(),
          customerId: z.number(),
          corporateProfileID: z.number(),
          doBillCorporate: z.boolean(),
        }),
        companyId: z.number(),
        aging_0_15: z.number(),
        aging_16_30: z.number(),
        aging_30_45: z.number(),
        aging_46_60: z.number(),
        aging_61_75: z.number(),
        aging_76_90: z.number(),
        aging_91_120: z.number(),
        aging_121_150: z.number(),
        aging_151_180: z.number(),
        aging_180_Above: z.number(),
        aging_Total: z.number(),
      })
    ),
    invoiceAgingReportRequest: z.object({
      companyId: z.number(),
      agingDate: z.string(),
      invoiceARStatus: z.string(),
    }),
  }),
  status: z.string(),
  message: z.string(),
  includesOperationalMessage: z.boolean(),
})

export type AgingReport = z.infer<typeof AgingReportSchema>
