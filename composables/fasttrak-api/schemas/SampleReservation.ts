import { z } from 'zod'

export const SampleReservationSchema = z.object({
  item: z.object({
    createUser: z.string(),
    reservationId: z.number(),
    vehicleId: z.number(),
    employeeId: z.number(),
    greeterId: z.number(),
    externalBookingId: z.string(),
    companyId: z.number(),
    reservationGroupId: z.number(),
    customerId: z.number(),
    corporateProfileId: z.number(),
    pricingId: z.number(),
    vehicleTypeId: z.number(),
    reservationStatus: z.string(),
    travelType: z.string(),
    reservationPhoneNumber: z.string(),
    referencePO: z.string(),
    costCode: z.string(),
    bookingSource: z.string(),
    bookingCategory: z.string(),
    tripCategory: z.string(),
    tripType: z.string(),
    orderedBy: z.string(),
    orderedByPhone: z.string(),
    timeZoneName: z.string(),
    scheduledPickupTime: z.string(),
    estimatedEndTime: z.string(),
    isDatabaseTimezone: z.boolean(),
    timeZoneUTCOffsetMinutes: z.number(),
    timeZoneLocalOffsetMinutes: z.number(),
    driverInTime: z.null(),
    driverSpotTime: z.null(),
    enRouteTime: z.null(),
    onLocationTime: z.null(),
    actualPickupTime: z.null(),
    dropoffTime: z.null(),
    noShowTime: z.null(),
    cancelTime: z.null(),
    returnTime: z.null(),
    billingStartTime: z.null(),
    billingEndTime: z.null(),
    actualHours: z.number(),
    estimatedHours: z.number(),
    beginMileage: z.number(),
    endMileage: z.number(),
    driverNotes: z.string(),
    driverDispatchStatus: z.string(),
    dispatchNotes: z.string(),
    tripNotes: z.string(),
    affiliateNotes: z.string(),
    tripPreferences: z.string(),
    fromLocation: z.object({
      latitude: z.number(),
      longitude: z.number(),
      address: z.object({
        street1: z.string(),
        street2: z.string(),
        city: z.string(),
        region: z.string(),
        postalCode: z.string(),
        displayAddress: z.string(),
        geoLookupAddress: z.string(),
        cityRegionPostalCode: z.string(),
      }),
      airportAirlineFlightInfo: z.object({
        airportId: z.number(),
        airportCode: z.string(),
        airportName: z.string(),
        airlineId: z.number(),
        airlineCode: z.string(),
        airlineName: z.string(),
        flightNumber: z.string(),
        connectingAirportID: z.number(),
        scheduledDateTime: z.string(),
        actualDateTime: z.null(),
        flightStatus: z.string(),
        flightStatusAdditional: z.string(),
        flightStatusType: z.string(),
      }),
      additionalInformation: z.string(),
      summaryAddress: z.string(),
      displayAddress: z.string(),
      geoLookupAddress: z.string(),
    }),
    toLocation: z.object({
      latitude: z.number(),
      longitude: z.number(),
      address: z.object({
        street1: z.string(),
        street2: z.string(),
        city: z.string(),
        region: z.string(),
        postalCode: z.string(),
        country: z.string(),
        displayAddress: z.string(),
        geoLookupAddress: z.string(),
        cityRegionPostalCode: z.string(),
      }),
      additionalInformation: z.string(),
      summaryAddress: z.string(),
      displayAddress: z.string(),
      geoLookupAddress: z.string(),
    }),
    passengerCount: z.number(),
    luggageCount: z.number(),
    primaryPassenger: z.object({
      name: z.string(),
      alias: z.string(),
      phoneNumber: z.string(),
      emailAddress: z.string(),
      doEnablePassengerEmail: z.boolean(),
      doEnablePassengerSMS: z.boolean(),
    }),
    numAdditionalStops: z.number(),
    numSupportDocuments: z.number(),
    reservationOrigin: z.string(),
    totalCharges: z.number(),
    affiliatePay: z.number(),
    isInBilling: z.boolean(),
    isExcludedFromBilling: z.boolean(),
    isFinalized: z.boolean(),
    isInvoiced: z.boolean(),
    isDriverPayProcessed: z.boolean(),
    isDriverPayReadyForProcessing: z.boolean(),
    isChangedDayOfDispatch: z.boolean(),
    isRecurring: z.boolean(),
    hasReservationNotes: z.boolean(),
    hasIncidents: z.boolean(),
    isCharter: z.boolean(),
    isCharterLeg: z.boolean(),
    charterReservationId: z.number(),
    charterMoveId: z.number(),
    charterMoveName: z.string(),
    charterLegType: z.string(),
    collectionMethod: z.string(),
    collectionType: z.string(),
    creditCardId: z.number(),
    isVip: z.boolean(),
    isSpecialHandling: z.boolean(),
    segmentId: z.string(),
    alternateContractId: z.number(),
    doInvoiceCustomerDirectly: z.boolean(),
    isFarmIn: z.boolean(),
    isFarmOut: z.boolean(),
    totalDeposits: z.number(),
    creditCardAuthorizationAmount: z.number(),
    pricingInformation: z.object({
      pricingId: z.number(),
      vehicleTypeId: z.number(),
      pricingVehicleTypeZoneId: z.number(),
      isFlatRate: z.boolean(),
      baseRate: z.object({
        minimum: z.number(),
        estimated: z.number(),
        quantity: z.number(),
        rate: z.number(),
        total: z.number(),
        name: z.string(),
        pricingItemType: z.string(),
      }),
      additionalCharge1: z.object({
        minimum: z.number(),
        estimated: z.number(),
        quantity: z.number(),
        rate: z.number(),
        total: z.number(),
        name: z.string(),
        pricingItemType: z.string(),
      }),
      additionalCharge2: z.object({
        minimum: z.number(),
        estimated: z.number(),
        quantity: z.number(),
        rate: z.number(),
        total: z.number(),
        name: z.string(),
        pricingItemType: z.string(),
      }),
      additionalPricingItems: z.array(
        z.union([
          z.object({
            pricingItemId: z.number(),
            isQuantifiable: z.boolean(),
            isFixedPrice: z.boolean(),
            applyToBaseCharge: z.boolean(),
            applyToAdditional1Charge: z.boolean(),
            applyToAdditional2Charge: z.boolean(),
            selectedTaxRateId: z.number(),
            doPayToDriver: z.boolean(),
            doPayToDriverOnlyContractor: z.boolean(),
            driverPayPercentage: z.number(),
            isCustomerOverride: z.boolean(),
            isCorporateOverride: z.boolean(),
            quantity: z.number(),
            rate: z.number(),
            total: z.number(),
            name: z.string(),
            pricingItemType: z.string(),
          }),
          z.object({
            pricingItemId: z.number(),
            isQuantifiable: z.boolean(),
            isFixedPrice: z.boolean(),
            applyToBaseCharge: z.boolean(),
            applyToAdditional1Charge: z.boolean(),
            applyToAdditional2Charge: z.boolean(),
            appliesToFixedItemList: z.array(z.unknown()),
            appliesToAdditionalItemList: z.array(z.unknown()),
            selectedTaxRateId: z.number(),
            doPayToDriver: z.boolean(),
            doPayToDriverOnlyContractor: z.boolean(),
            driverPayPercentage: z.number(),
            isCustomerOverride: z.boolean(),
            isCorporateOverride: z.boolean(),
            quantity: z.number(),
            rate: z.number(),
            total: z.number(),
            name: z.string(),
            pricingItemType: z.string(),
          }),
          z.object({
            pricingItemId: z.number(),
            isQuantifiable: z.boolean(),
            isFixedPrice: z.boolean(),
            applyToBaseCharge: z.boolean(),
            applyToAdditional1Charge: z.boolean(),
            applyToAdditional2Charge: z.boolean(),
            appliesToFixedItemList: z.array(z.number()),
            appliesToVariableItemList: z.array(z.number()),
            appliesToAdditionalItemList: z.array(z.unknown()),
            appliesToZoneAdditionalChargeItemList: z.array(z.unknown()),
            selectedTaxRateId: z.number(),
            doPayToDriver: z.boolean(),
            doPayToDriverOnlyContractor: z.boolean(),
            driverPayPercentage: z.number(),
            isCustomerOverride: z.boolean(),
            isCorporateOverride: z.boolean(),
            quantity: z.number(),
            rate: z.number(),
            total: z.number(),
            name: z.string(),
            pricingItemType: z.string(),
          }),
        ])
      ),
      taxRateList: z.array(
        z.object({
          taxRateId: z.number(),
          applicableToPricingItemId: z.number(),
          name: z.string(),
          rate: z.number(),
        })
      ),
      incrementalCharge: z.number(),
      minimumCharge: z.number(),
      minimumRateIncludedAsBase: z.boolean(),
      totalCharge: z.number(),
    }),
    additionalPassengerStopList: z.array(z.unknown()),
    companySummary: z.object({
      companyId: z.number(),
      companyName: z.string(),
    }),
    customerSummary: z.object({
      doBillCorporate: z.boolean(),
      doUseCorporatePricingOverrides: z.boolean(),
      profileNotes: z.string(),
      invoiceMessage: z.string(),
      invoiceCreateHandlingType: z.string(),
      corporateProfileId: z.number(),
      deliveryMethod: z.string(),
      deliveryFrequency: z.string(),
      customerId: z.number(),
      companyId: z.number(),
      firstName: z.string(),
      lastName: z.string(),
      middleName: z.string(),
      emailAddress: z.string(),
      phoneNumber1: z.string(),
      cellPhoneNumber: z.string(),
      accountNumber: z.string(),
      doRequireReferencePo: z.boolean(),
    }),
    vehicleSummary: z.object({
      vehicleId: z.number(),
      vehicleTypeId: z.number(),
      year: z.number(),
      capacity: z.number(),
      currentMileage: z.number(),
    }),
    vehicleTypeSummary: z.object({
      vehicleTypeId: z.number(),
      externalVehicleTypeId: z.number(),
      vehicleTypeName: z.string(),
      isExcludedFromInternetReservations: z.boolean(),
      passengerCapacity: z.number(),
      bagCapacity: z.number(),
      colorRed: z.number(),
      colorGreen: z.number(),
      colorBlue: z.number(),
    }),
    customerContactId: z.number(),
    corporateProfileContactId: z.number(),
    cancelledBy: z.string(),
    confirmedBy: z.string(),
    createTime: z.string(),
    modifiedTime: z.string(),
  }),
  status: z.string(),
  message: z.string(),
  includesOperationalMessage: z.boolean(),
})
